diff -urN asm_id/d_draw.asm asm_raven/d_draw.asm
--- asm_id/d_draw.asm	1996-09-18 13:24:48.000000000 +0300
+++ asm_raven/d_draw.asm	2000-11-10 10:04:34.000000000 +0200
@@ -70,16 +70,6 @@
  externdef _d_pix_max:dword
  externdef _d_y_aspect_shift:dword
  externdef _screenwidth:dword
- externdef _vright:dword
- externdef _vup:dword
- externdef _vpn:dword
- externdef _BOPS_Error:dword
- externdef _snd_scaletable:dword
- externdef _paintbuffer:dword
- externdef _snd_linear_count:dword
- externdef _snd_p:dword
- externdef _snd_vol:dword
- externdef _snd_out:dword
  externdef _r_leftclipped:dword
  externdef _r_leftenter:dword
  externdef _r_rightclipped:dword
@@ -231,6 +221,18 @@
  externdef fp_64kx64k:dword
  externdef pz:dword
  externdef spr8entryvec_table:dword
+ externdef _snd_scaletable:dword
+ externdef _paintbuffer:dword
+ externdef _snd_linear_count:dword
+ externdef _snd_p:dword
+ externdef _snd_vol:dword
+ externdef _snd_out:dword
+ externdef _vright:dword
+ externdef _vup:dword
+ externdef _vpn:dword
+ externdef _BOPS_Error:dword
+ externdef _scanList:dword
+ externdef _ZScanCount:dword
 _TEXT SEGMENT
 LClampHigh0:
  mov esi,ds:dword ptr[_bbextents]
@@ -945,5 +947,142 @@
  pop edi
  pop ebp
  ret
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+LClamp2:
+ mov edx,040000000h
+ xor ebx,ebx
+ fstp st(0)
+ jmp LZDraw2
+LClampNeg2:
+ mov edx,040000000h
+ xor ebx,ebx
+ fstp st(0)
+ jmp LZDrawNeg2
+public _D_DrawSingleZSpans
+_D_DrawSingleZSpans:
+ push ebp
+ push edi
+ push esi
+ push ebx
+ mov ds:dword ptr[_ZScanCount],0
+ fld ds:dword ptr[_d_zistepu]
+ mov eax,ds:dword ptr[_d_zistepu]
+ mov esi,ds:dword ptr[4+16+esp]
+ test eax,eax
+ jz LFNegSpan2
+ fmul ds:dword ptr[Float2ToThe31nd]
+ fistp ds:dword ptr[izistep]
+ mov ebx,ds:dword ptr[izistep]
+LFSpanLoop2:
+ fild ds:dword ptr[4+esi]
+ fild ds:dword ptr[0+esi]
+ mov ecx,ds:dword ptr[4+esi]
+ mov edi,ds:dword ptr[_d_pzbuffer]
+ fmul ds:dword ptr[_d_zistepu]
+ fxch st(1)
+ fmul ds:dword ptr[_d_zistepv]
+ fxch st(1)
+ fadd ds:dword ptr[_d_ziorigin]
+ imul ecx,ds:dword ptr[_d_zrowbytes]
+ faddp st(1),st(0)
+ fcom ds:dword ptr[float_point5]
+ add edi,ecx
+ mov edx,ds:dword ptr[0+esi]
+ add edx,edx
+ mov ecx,ds:dword ptr[8+esi]
+ add edi,edx
+ push esi
+ fnstsw ax
+ test ah,045h
+ jz LClamp2
+ fmul ds:dword ptr[Float2ToThe31nd]
+ fistp ds:dword ptr[izi]
+ mov edx,ds:dword ptr[izi]
+LZDraw2:
+ mov eax,edx
+ add edx,ebx
+ shr eax,16
+ mov ds:byte ptr[_scanList + ecx - 1], 1
+ cmp ds:word ptr[edi],ax
+ jle LZSkip
+ mov ds:byte ptr[_scanList + ecx - 1], 0
+ add ds:dword ptr[_ZScanCount],1
+ LZSkip:
+ add edi,2
+ dec ecx
+ jnz LZDraw2
+
+ pop esi
+ jmp LFDone2
+
+LFNegSpan2:
+ fmul ds:dword ptr[FloatMinus2ToThe31nd]
+ fistp ds:dword ptr[izistep]
+ mov ebx,ds:dword ptr[izistep]
+LFNegSpanLoop2:
+ fild ds:dword ptr[4+esi]
+ fild ds:dword ptr[0+esi]
+ mov ecx,ds:dword ptr[4+esi]
+ mov edi,ds:dword ptr[_d_pzbuffer]
+ fmul ds:dword ptr[_d_zistepu]
+ fxch st(1)
+ fmul ds:dword ptr[_d_zistepv]
+ fxch st(1)
+ fadd ds:dword ptr[_d_ziorigin]
+ imul ecx,ds:dword ptr[_d_zrowbytes]
+ faddp st(1),st(0)
+ fcom ds:dword ptr[float_point5]
+ add edi,ecx
+ mov edx,ds:dword ptr[0+esi]
+ add edx,edx
+ mov ecx,ds:dword ptr[8+esi]
+ add edi,edx
+ push esi
+ fnstsw ax
+ test ah,045h
+ jz LClampNeg2
+ fmul ds:dword ptr[Float2ToThe31nd]
+ fistp ds:dword ptr[izi]
+ mov edx,ds:dword ptr[izi]
+LZDrawNeg2:
+ mov eax,edx
+ sub edx,ebx
+ shr eax,16
+ mov ds:byte ptr[_scanList + ecx - 1], 1
+ cmp ds:word ptr[edi],ax
+ jle LZSkip2
+ mov ds:byte ptr[_scanList + ecx - 1], 0
+ LZSkip2:
+ add edi,2
+ dec ecx
+ jnz LZDraw2
+
+ pop esi
+
+LFDone2:
+ pop ebx
+ pop esi
+ pop edi
+ pop ebp
+ ret
+
+
+
+
 _TEXT ENDS
  END
diff -urN asm_id/d_parta.asm asm_raven/d_parta.asm
--- asm_id/d_parta.asm	1996-09-18 13:24:48.000000000 +0300
+++ asm_raven/d_parta.asm	2000-11-10 10:04:36.000000000 +0200
@@ -210,6 +210,7 @@
  externdef DP_Color:dword
  externdef DP_Pix:dword
  externdef DP_EntryTable:dword
+ externdef DP_EntryTransTable:dword
  externdef pbase:dword
  externdef s:dword
  externdef t:dword
@@ -231,6 +232,7 @@
  externdef fp_64kx64k:dword
  externdef pz:dword
  externdef spr8entryvec_table:dword
+ externdef _transTable:dword
 _TEXT SEGMENT
  align 4
  public _D_DrawParticle
@@ -338,21 +340,34 @@
  jng LTestDone
  mov eax,ecx
 LTestDone:
- mov ch,ds:byte ptr[DP_Color]
+ mov cx,ds:word ptr[DP_Color]
  mov ebx,ds:dword ptr[_d_y_aspect_shift]
  test ebx,ebx
  jnz LDefault
  cmp eax,4
  ja LDefault
+
+ test ch,ch
+ jnz Trans
+
  jmp dword ptr[DP_EntryTable-4+eax*4]
+Trans:
+ and ecx, 0ffh
+ mov ch, cl
+ jmp dword ptr[DP_EntryTransTable-4+eax*4]
+
+
+
+ 
  public DP_1x1
 DP_1x1:
  cmp ds:word ptr[edx],bp
  jg LDone
  mov ds:word ptr[edx],bp
- mov ds:byte ptr[edi],ch
+ mov ds:byte ptr[edi],cl
  jmp LDone
  public DP_2x2
+
 DP_2x2:
  push esi
  mov ebx,ds:dword ptr[_screenwidth]
@@ -360,26 +375,27 @@
  cmp ds:word ptr[edx],bp
  jg L2x2_1
  mov ds:word ptr[edx],bp
- mov ds:byte ptr[edi],ch
+ mov ds:byte ptr[edi],cl
 L2x2_1:
  cmp ds:word ptr[2+edx],bp
  jg L2x2_2
  mov ds:word ptr[2+edx],bp
- mov ds:byte ptr[1+edi],ch
+ mov ds:byte ptr[1+edi],cl
 L2x2_2:
  cmp ds:word ptr[edx+esi*1],bp
  jg L2x2_3
  mov ds:word ptr[edx+esi*1],bp
- mov ds:byte ptr[edi+ebx*1],ch
+ mov ds:byte ptr[edi+ebx*1],cl
 L2x2_3:
  cmp ds:word ptr[2+edx+esi*1],bp
  jg L2x2_4
  mov ds:word ptr[2+edx+esi*1],bp
- mov ds:byte ptr[1+edi+ebx*1],ch
+ mov ds:byte ptr[1+edi+ebx*1],cl
 L2x2_4:
  pop esi
  jmp LDone
  public DP_3x3
+
 DP_3x3:
  push esi
  mov ebx,ds:dword ptr[_screenwidth]
@@ -387,51 +403,52 @@
  cmp ds:word ptr[edx],bp
  jg L3x3_1
  mov ds:word ptr[edx],bp
- mov ds:byte ptr[edi],ch
+ mov ds:byte ptr[edi],cl
 L3x3_1:
  cmp ds:word ptr[2+edx],bp
  jg L3x3_2
  mov ds:word ptr[2+edx],bp
- mov ds:byte ptr[1+edi],ch
+ mov ds:byte ptr[1+edi],cl
 L3x3_2:
  cmp ds:word ptr[4+edx],bp
  jg L3x3_3
  mov ds:word ptr[4+edx],bp
- mov ds:byte ptr[2+edi],ch
+ mov ds:byte ptr[2+edi],cl
 L3x3_3:
  cmp ds:word ptr[edx+esi*1],bp
  jg L3x3_4
  mov ds:word ptr[edx+esi*1],bp
- mov ds:byte ptr[edi+ebx*1],ch
+ mov ds:byte ptr[edi+ebx*1],cl
 L3x3_4:
  cmp ds:word ptr[2+edx+esi*1],bp
  jg L3x3_5
  mov ds:word ptr[2+edx+esi*1],bp
- mov ds:byte ptr[1+edi+ebx*1],ch
+ mov ds:byte ptr[1+edi+ebx*1],cl
 L3x3_5:
  cmp ds:word ptr[4+edx+esi*1],bp
  jg L3x3_6
  mov ds:word ptr[4+edx+esi*1],bp
- mov ds:byte ptr[2+edi+ebx*1],ch
+ mov ds:byte ptr[2+edi+ebx*1],cl
 L3x3_6:
  cmp ds:word ptr[edx+esi*2],bp
  jg L3x3_7
  mov ds:word ptr[edx+esi*2],bp
- mov ds:byte ptr[edi+ebx*2],ch
+ mov ds:byte ptr[edi+ebx*2],cl
 L3x3_7:
  cmp ds:word ptr[2+edx+esi*2],bp
  jg L3x3_8
  mov ds:word ptr[2+edx+esi*2],bp
- mov ds:byte ptr[1+edi+ebx*2],ch
+ mov ds:byte ptr[1+edi+ebx*2],cl
 L3x3_8:
  cmp ds:word ptr[4+edx+esi*2],bp
  jg L3x3_9
  mov ds:word ptr[4+edx+esi*2],bp
- mov ds:byte ptr[2+edi+ebx*2],ch
+ mov ds:byte ptr[2+edi+ebx*2],cl
 L3x3_9:
  pop esi
  jmp LDone
  public DP_4x4
+
 DP_4x4:
  push esi
  mov ebx,ds:dword ptr[_screenwidth]
@@ -439,99 +456,385 @@
  cmp ds:word ptr[edx],bp
  jg L4x4_1
  mov ds:word ptr[edx],bp
- mov ds:byte ptr[edi],ch
+ mov ds:byte ptr[edi],cl
 L4x4_1:
  cmp ds:word ptr[2+edx],bp
  jg L4x4_2
  mov ds:word ptr[2+edx],bp
- mov ds:byte ptr[1+edi],ch
+ mov ds:byte ptr[1+edi],cl
 L4x4_2:
  cmp ds:word ptr[4+edx],bp
  jg L4x4_3
  mov ds:word ptr[4+edx],bp
- mov ds:byte ptr[2+edi],ch
+ mov ds:byte ptr[2+edi],cl
 L4x4_3:
  cmp ds:word ptr[6+edx],bp
  jg L4x4_4
  mov ds:word ptr[6+edx],bp
- mov ds:byte ptr[3+edi],ch
+ mov ds:byte ptr[3+edi],cl
 L4x4_4:
  cmp ds:word ptr[edx+esi*1],bp
  jg L4x4_5
  mov ds:word ptr[edx+esi*1],bp
- mov ds:byte ptr[edi+ebx*1],ch
+ mov ds:byte ptr[edi+ebx*1],cl
 L4x4_5:
  cmp ds:word ptr[2+edx+esi*1],bp
  jg L4x4_6
  mov ds:word ptr[2+edx+esi*1],bp
- mov ds:byte ptr[1+edi+ebx*1],ch
+ mov ds:byte ptr[1+edi+ebx*1],cl
 L4x4_6:
  cmp ds:word ptr[4+edx+esi*1],bp
  jg L4x4_7
  mov ds:word ptr[4+edx+esi*1],bp
- mov ds:byte ptr[2+edi+ebx*1],ch
+ mov ds:byte ptr[2+edi+ebx*1],cl
 L4x4_7:
  cmp ds:word ptr[6+edx+esi*1],bp
  jg L4x4_8
  mov ds:word ptr[6+edx+esi*1],bp
- mov ds:byte ptr[3+edi+ebx*1],ch
+ mov ds:byte ptr[3+edi+ebx*1],cl
 L4x4_8:
  lea edx,ds:dword ptr[edx+esi*2]
  lea edi,ds:dword ptr[edi+ebx*2]
  cmp ds:word ptr[edx],bp
  jg L4x4_9
  mov ds:word ptr[edx],bp
- mov ds:byte ptr[edi],ch
+ mov ds:byte ptr[edi],cl
 L4x4_9:
  cmp ds:word ptr[2+edx],bp
  jg L4x4_10
  mov ds:word ptr[2+edx],bp
- mov ds:byte ptr[1+edi],ch
+ mov ds:byte ptr[1+edi],cl
 L4x4_10:
  cmp ds:word ptr[4+edx],bp
  jg L4x4_11
  mov ds:word ptr[4+edx],bp
- mov ds:byte ptr[2+edi],ch
+ mov ds:byte ptr[2+edi],cl
 L4x4_11:
  cmp ds:word ptr[6+edx],bp
  jg L4x4_12
  mov ds:word ptr[6+edx],bp
- mov ds:byte ptr[3+edi],ch
+ mov ds:byte ptr[3+edi],cl
 L4x4_12:
  cmp ds:word ptr[edx+esi*1],bp
  jg L4x4_13
  mov ds:word ptr[edx+esi*1],bp
- mov ds:byte ptr[edi+ebx*1],ch
+ mov ds:byte ptr[edi+ebx*1],cl
 L4x4_13:
  cmp ds:word ptr[2+edx+esi*1],bp
  jg L4x4_14
  mov ds:word ptr[2+edx+esi*1],bp
- mov ds:byte ptr[1+edi+ebx*1],ch
+ mov ds:byte ptr[1+edi+ebx*1],cl
 L4x4_14:
  cmp ds:word ptr[4+edx+esi*1],bp
  jg L4x4_15
  mov ds:word ptr[4+edx+esi*1],bp
- mov ds:byte ptr[2+edi+ebx*1],ch
+ mov ds:byte ptr[2+edi+ebx*1],cl
 L4x4_15:
  cmp ds:word ptr[6+edx+esi*1],bp
  jg L4x4_16
  mov ds:word ptr[6+edx+esi*1],bp
- mov ds:byte ptr[3+edi+ebx*1],ch
+ mov ds:byte ptr[3+edi+ebx*1],cl
 L4x4_16:
  pop esi
  jmp LDone
+
+
+
+ public DP_T1x1
+DP_T1x1:
+ mov eax, ds:dword ptr[_transTable]
+
+ cmp ds:word ptr[edx],bp
+ jg LDone
+ mov ds:word ptr[edx],bp
+ mov cl, ds:byte ptr[edi]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[edi],cl
+ jmp LDone
+ public DP_T2x2
+
+DP_T2x2:
+ mov eax, ds:dword ptr[_transTable]
+
+ push esi
+ mov ebx,ds:dword ptr[_screenwidth]
+ mov esi,ds:dword ptr[_d_zrowbytes]
+ cmp ds:word ptr[edx],bp
+ jg LT2x2_1
+ mov ds:word ptr[edx],bp
+ mov cl, ds:byte ptr[edi]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[edi],cl
+
+LT2x2_1:
+ cmp ds:word ptr[2+edx],bp
+ jg LT2x2_2
+ mov ds:word ptr[2+edx],bp
+ mov cl, ds:byte ptr[1+edi]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[1+edi],cl
+
+LT2x2_2:
+ cmp ds:word ptr[edx+esi*1],bp
+ jg LT2x2_3
+ mov ds:word ptr[edx+esi*1],bp
+ mov cl, ds:byte ptr[edi+ebx*1]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[edi+ebx*1],cl
+
+LT2x2_3:
+ cmp ds:word ptr[2+edx+esi*1],bp
+ jg LT2x2_4
+ mov ds:word ptr[2+edx+esi*1],bp
+ mov cl, ds:byte ptr[1+edi+ebx*1]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[1+edi+ebx*1],cl
+
+LT2x2_4:
+ pop esi
+ jmp LDone
+ public DP_T3x3
+
+DP_T3x3:
+ mov eax, ds:dword ptr[_transTable]
+
+ push esi
+ mov ebx,ds:dword ptr[_screenwidth]
+ mov esi,ds:dword ptr[_d_zrowbytes]
+ cmp ds:word ptr[edx],bp
+ jg LT3x3_1
+ mov ds:word ptr[edx],bp
+ mov cl, ds:byte ptr[edi]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[edi],cl
+
+LT3x3_1:
+ cmp ds:word ptr[2+edx],bp
+ jg LT3x3_2
+ mov ds:word ptr[2+edx],bp
+ mov cl, ds:byte ptr[1+edi]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[1+edi],cl
+
+LT3x3_2:
+ cmp ds:word ptr[4+edx],bp
+ jg LT3x3_3
+ mov ds:word ptr[4+edx],bp
+ mov cl, ds:byte ptr[2+edi]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[2+edi],cl
+
+LT3x3_3:
+ cmp ds:word ptr[edx+esi*1],bp
+ jg LT3x3_4
+ mov ds:word ptr[edx+esi*1],bp
+ mov cl, ds:byte ptr[edi+ebx*1]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[edi+ebx*1],cl
+
+LT3x3_4:
+ cmp ds:word ptr[2+edx+esi*1],bp
+ jg LT3x3_5
+ mov ds:word ptr[2+edx+esi*1],bp
+ mov cl, ds:byte ptr[1+edi+ebx*1]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[1+edi+ebx*1],cl
+
+LT3x3_5:
+ cmp ds:word ptr[4+edx+esi*1],bp
+ jg LT3x3_6
+ mov ds:word ptr[4+edx+esi*1],bp
+ mov cl, ds:byte ptr[2+edi+ebx*1]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[2+edi+ebx*1],cl
+
+LT3x3_6:
+ cmp ds:word ptr[edx+esi*2],bp
+ jg LT3x3_7
+ mov ds:word ptr[edx+esi*2],bp
+ mov cl, ds:byte ptr[edi+ebx*2]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[edi+ebx*2],cl
+
+LT3x3_7:
+ cmp ds:word ptr[2+edx+esi*2],bp
+ jg LT3x3_8
+ mov ds:word ptr[2+edx+esi*2],bp
+ mov cl, ds:byte ptr[1+edi+ebx*2]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[1+edi+ebx*2],cl
+
+LT3x3_8:
+ cmp ds:word ptr[4+edx+esi*2],bp
+ jg LT3x3_9
+ mov ds:word ptr[4+edx+esi*2],bp
+ mov cl, ds:byte ptr[2+edi+ebx*2]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[2+edi+ebx*2],cl
+
+LT3x3_9:
+ pop esi
+ jmp LDone
+ public DP_T4x4
+
+DP_T4x4:
+ mov eax, ds:dword ptr[_transTable]
+
+ push esi
+ mov ebx,ds:dword ptr[_screenwidth]
+ mov esi,ds:dword ptr[_d_zrowbytes]
+ cmp ds:word ptr[edx],bp
+ jg LT4x4_1
+ mov ds:word ptr[edx],bp
+ mov cl, ds:byte ptr[edi]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[edi],cl
+
+LT4x4_1:
+ cmp ds:word ptr[2+edx],bp
+ jg LT4x4_2
+ mov ds:word ptr[2+edx],bp
+ mov cl, ds:byte ptr[1+edi]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[1+edi],cl
+
+LT4x4_2:
+ cmp ds:word ptr[4+edx],bp
+ jg LT4x4_3
+ mov ds:word ptr[4+edx],bp
+ mov cl, ds:byte ptr[2+edi]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[2+edi],cl
+
+LT4x4_3:
+ cmp ds:word ptr[6+edx],bp
+ jg LT4x4_4
+ mov ds:word ptr[6+edx],bp
+ mov cl, ds:byte ptr[3+edi]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[3+edi],cl
+
+LT4x4_4:
+ cmp ds:word ptr[edx+esi*1],bp
+ jg LT4x4_5
+ mov ds:word ptr[edx+esi*1],bp
+ mov cl, ds:byte ptr[edi+ebx*1]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[edi+ebx*1],cl
+
+LT4x4_5:
+ cmp ds:word ptr[2+edx+esi*1],bp
+ jg LT4x4_6
+ mov ds:word ptr[2+edx+esi*1],bp
+ mov cl, ds:byte ptr[1+edi+ebx*1]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[1+edi+ebx*1],cl
+
+LT4x4_6:
+ cmp ds:word ptr[4+edx+esi*1],bp
+ jg LT4x4_7
+ mov ds:word ptr[4+edx+esi*1],bp
+ mov cl, ds:byte ptr[2+edi+ebx*1]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[2+edi+ebx*1],cl
+
+LT4x4_7:
+ cmp ds:word ptr[6+edx+esi*1],bp
+ jg LT4x4_8
+ mov ds:word ptr[6+edx+esi*1],bp
+ mov cl, ds:byte ptr[3+edi+ebx*1]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[3+edi+ebx*1],cl
+
+LT4x4_8:
+ lea edx,ds:dword ptr[edx+esi*2]
+ lea edi,ds:dword ptr[edi+ebx*2]
+ cmp ds:word ptr[edx],bp
+ jg LT4x4_9
+ mov ds:word ptr[edx],bp
+ mov cl, ds:byte ptr[edi]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[edi],cl
+
+LT4x4_9:
+ cmp ds:word ptr[2+edx],bp
+ jg LT4x4_10
+ mov ds:word ptr[2+edx],bp
+ mov cl, ds:byte ptr[1+edi]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[1+edi],cl
+
+LT4x4_10:
+ cmp ds:word ptr[4+edx],bp
+ jg LT4x4_11
+ mov ds:word ptr[4+edx],bp
+ mov cl, ds:byte ptr[2+edi]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[2+edi],cl
+
+LT4x4_11:
+ cmp ds:word ptr[6+edx],bp
+ jg LT4x4_12
+ mov ds:word ptr[6+edx],bp
+ mov cl, ds:byte ptr[3+edi]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[3+edi],cl
+
+LT4x4_12:
+ cmp ds:word ptr[edx+esi*1],bp
+ jg LT4x4_13
+ mov ds:word ptr[edx+esi*1],bp
+ mov cl, ds:byte ptr[edi+ebx*1]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[edi+ebx*1],cl
+
+LT4x4_13:
+ cmp ds:word ptr[2+edx+esi*1],bp
+ jg LT4x4_14
+ mov ds:word ptr[2+edx+esi*1],bp
+ mov cl, ds:byte ptr[1+edi+ebx*1]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[1+edi+ebx*1],cl
+LT4x4_14:
+ cmp ds:word ptr[4+edx+esi*1],bp
+ jg LT4x4_15
+ mov ds:word ptr[4+edx+esi*1],bp
+ mov cl, ds:byte ptr[2+edi+ebx*1]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[2+edi+ebx*1],cl
+
+LT4x4_15:
+ cmp ds:word ptr[6+edx+esi*1],bp
+ jg LT4x4_16
+ mov ds:word ptr[6+edx+esi*1],bp
+ mov cl, ds:byte ptr[3+edi+ebx*1]
+ mov cl, ds:byte ptr[eax+ecx]
+ mov ds:byte ptr[3+edi+ebx*1],cl
+
+LT4x4_16:
+ pop esi
+ jmp LDone
+
+
+
 LDefault:
+ test ch,ch
+ jnz LTDefault
+
  mov ebx,eax
  mov ds:dword ptr[DP_Pix],eax
+ push cx
  mov cl,ds:byte ptr[_d_y_aspect_shift]
  shl ebx,cl
+ pop cx
+
 LGenRowLoop:
  mov eax,ds:dword ptr[DP_Pix]
 LGenColLoop:
  cmp ds:word ptr[-2+edx+eax*2],bp
  jg LGSkip
  mov ds:word ptr[-2+edx+eax*2],bp
- mov ds:byte ptr[-1+edi+eax*1],ch
+ mov ds:byte ptr[-1+edi+eax*1],cl
 LGSkip:
  dec eax
  jnz LGenColLoop
@@ -539,6 +842,40 @@
  add edi,ds:dword ptr[_screenwidth]
  dec ebx
  jnz LGenRowLoop
+ jmp LDone
+
+LTDefault:
+ push esi
+ and ecx, 0ffh
+ mov ch, cl
+ mov esi, ds:dword ptr[_transTable]
+
+ mov ebx,eax
+ mov ds:dword ptr[DP_Pix],eax
+ mov cl,ds:byte ptr[_d_y_aspect_shift]
+ shl ebx,cl
+ 
+LTGenRowLoop:
+ mov eax,ds:dword ptr[DP_Pix]
+LTGenColLoop:
+ cmp ds:word ptr[-2+edx+eax*2],bp
+ jg LTGSkip
+ mov ds:word ptr[-2+edx+eax*2],bp
+
+ mov cl, ds:byte ptr[-1+edi+eax*1]
+ mov cl, ds:byte ptr[esi+ecx]
+ mov ds:byte ptr[-1+edi+eax*1],cl
+
+LTGSkip:
+ dec eax
+ jnz LTGenColLoop
+ add edx,ds:dword ptr[_d_zrowbytes]
+ add edi,ds:dword ptr[_screenwidth]
+ dec ebx
+ jnz LTGenRowLoop
+
+ pop esi
+
 LDone:
  pop ebx
  pop edi
diff -urN asm_id/d_polysa.asm asm_raven/d_polysa.asm
--- asm_id/d_polysa.asm	1996-09-18 13:24:48.000000000 +0300
+++ asm_raven/d_polysa.asm	2000-11-10 10:04:36.000000000 +0200
@@ -70,16 +70,6 @@
  externdef _d_pix_max:dword
  externdef _d_y_aspect_shift:dword
  externdef _screenwidth:dword
- externdef _vright:dword
- externdef _vup:dword
- externdef _vpn:dword
- externdef _BOPS_Error:dword
- externdef _snd_scaletable:dword
- externdef _paintbuffer:dword
- externdef _snd_linear_count:dword
- externdef _snd_p:dword
- externdef _snd_vol:dword
- externdef _snd_out:dword
  externdef _r_leftclipped:dword
  externdef _r_leftenter:dword
  externdef _r_rightclipped:dword
@@ -127,7 +117,6 @@
  externdef _r_affinetridesc:dword
  externdef _acolormap:dword
  externdef _d_pcolormap:dword
- externdef _r_affinetridesc:dword
  externdef _d_sfrac:dword
  externdef _d_ptex:dword
  externdef _d_pedgespanpackage:dword
@@ -231,6 +220,16 @@
  externdef fp_64kx64k:dword
  externdef pz:dword
  externdef spr8entryvec_table:dword
+ externdef _snd_scaletable:dword
+ externdef _paintbuffer:dword
+ externdef _snd_linear_count:dword
+ externdef _snd_p:dword
+ externdef _snd_vol:dword
+ externdef _snd_out:dword
+ externdef _vright:dword
+ externdef _vup:dword
+ externdef _vpn:dword
+ externdef _BOPS_Error:dword
 _DATA SEGMENT
  align 4
 p10_minus_p20 dd 0
@@ -245,6 +244,7 @@
 _TEXT SEGMENT
  externdef _D_PolysetSetEdgeTable:dword
  externdef _D_RasterizeAliasPolySmooth:dword
+ 
  public _D_PolysetCalcGradients
 _D_PolysetCalcGradients:
  fild ds:dword ptr[_r_p0+0]
@@ -385,6 +385,7 @@
  add eax,ecx
  mov ds:dword ptr[_a_ststepxwhole],eax
  ret
+ 
  public _D_PolysetRecursiveTriangle
 _D_PolysetRecursiveTriangle:
  push ebp
@@ -515,6 +516,7 @@
  pop esi
  pop ebp
  ret 12
+ 
  public _D_PolysetAff8Start
 _D_PolysetAff8Start:
  public _D_PolysetDrawSpans8
@@ -765,6 +767,7 @@
  mov ds:dword ptr[LPatch8-4],eax
  mov ds:dword ptr[LPatch9-4],eax
  ret
+ 
  public _D_PolysetDraw
 _D_PolysetDraw:
  sub esp,offset (((1024+1 + 1 + ((32 - 1) / 32)) + 1) * 32)
@@ -775,21 +778,24 @@
  mov eax,ds:dword ptr[_r_affinetridesc+28]
  test eax,eax
  jz _D_DrawNonSubdiv
- push ebp
- mov ebp,ds:dword ptr[_r_affinetridesc+24]
+ ;push ebp
+ ;mov ebp,ds:dword ptr[_r_affinetridesc+24]
  push esi
- shl ebp,4
+ ;shl ebp,4
  push ebx
  mov ebx,ds:dword ptr[_r_affinetridesc+16]
  push edi
  mov edi,ds:dword ptr[_r_affinetridesc+20]
 Llooptop:
- mov ecx,ds:dword ptr[4-16+0+ebx+ebp]
- mov esi,ds:dword ptr[4-16+4+ebx+ebp]
+ xor ecx,ecx
+ xor esi,esi
+ mov cx,word ptr[4+0+ebx]
+ mov si,word ptr[4+2+ebx]
+ xor edx,edx
+ mov dx,word ptr[4+4+ebx]
  shl ecx,5
- mov edx,ds:dword ptr[4-16+8+ebx+ebp]
- shl esi,5
  add ecx,edi
+ shl esi,5
  shl edx,5
  add esi,edi
  add edx,edi
@@ -818,15 +824,15 @@
  mov eax,ds:dword ptr[Ltemp]
  sub eax,080000001h
  jc Lskip
- mov eax,ds:dword ptr[0-16+ebx+ebp]
+ mov eax,ds:dword ptr[0+ebx]
  test eax,eax
  jz Lfacesback
  push edx
  push esi
  push ecx
  call near ptr _D_PolysetRecursiveTriangle
- sub ebp,16
- jnz Llooptop
+; sub ebp,16
+; jnz Llooptop
  jmp Ldone2
 Lfacesback:
  mov eax,ds:dword ptr[0+8+ecx]
@@ -863,15 +869,16 @@
  pop eax
  mov ds:dword ptr[0+8+ecx],eax
 Lskip:
- sub ebp,16
- jnz Llooptop
+; sub ebp,16
+; jnz Llooptop
 Ldone2:
  pop edi
  pop ebx
  pop esi
- pop ebp
+; pop ebp
  add esp,offset (((1024+1 + 1 + ((32 - 1) / 32)) + 1) * 32)
  ret
+
  public _D_PolysetScanLeftEdge
 _D_PolysetScanLeftEdge:
  push ebp
@@ -963,15 +970,10 @@
  pop esi
  pop ebp
  ret
- public _D_PolysetDrawFinalVerts
-_D_PolysetDrawFinalVerts:
- push ebp
- push ebx
- mov ecx,ds:dword ptr[8+8+esp]
- mov ebx,ds:dword ptr[4+8+esp]
+
+_L_PDFVert:
  push esi
  push edi
-LFVLoop:
  mov eax,ds:dword ptr[0+0+ebx]
  mov edx,ds:dword ptr[_r_refdef+40]
  cmp eax,edx
@@ -1003,32 +1005,45 @@
  add edi,eax
  mov ds:byte ptr[esi+edi],dl
 LNextVert:
- add ebx,32
- dec ecx
- jnz LFVLoop
  pop edi
  pop esi
+ret
+ 
+ public _D_PolysetDrawFinalVerts
+_D_PolysetDrawFinalVerts:
+ push ebp
+ push ebx
+ mov ebx,dword ptr[4+8+esp]	;pv1
+ call _L_PDFVert
+ mov ebx,dword ptr[8+8+esp]	;pv2
+ call _L_PDFVert
+ mov ebx,dword ptr[12+8+esp];pv3
+ call _L_PDFVert
  pop ebx
  pop ebp
  ret
+
  public _D_DrawNonSubdiv
 _D_DrawNonSubdiv:
- push ebp
- mov ebp,ds:dword ptr[_r_affinetridesc+24]
+ ;push ebp
+ ;mov ebp,ds:dword ptr[_r_affinetridesc+24]	;lnumtriangles
  push ebx
- shl ebp,4
+ ;shl ebp,4
  push esi
- mov esi,ds:dword ptr[_r_affinetridesc+16]
+ mov esi,ds:dword ptr[_r_affinetridesc+16] ;ptri
  push edi
 LNDLoop:
- mov edi,ds:dword ptr[_r_affinetridesc+20]
- mov ecx,ds:dword ptr[4+0-16+esi+ebp*1]
+ mov edi,ds:dword ptr[_r_affinetridesc+20] ;pfv
+ xor ecx,ecx;	//clear i1
+ xor edx,edx;	//clear i2
+ mov cx, word ptr[4+0+esi] ;ptri->vertindex[0]
+ xor ebx,ebx;	//clear i3
+ mov dx, word ptr[4+2+esi] ;ptri->vertindex[1]
  shl ecx,5
- mov edx,ds:dword ptr[4+4-16+esi+ebp*1]
+ mov bx, word ptr[4+4+esi] ;ptri->vertindex[2]
  shl edx,5
- mov ebx,ds:dword ptr[4+8-16+esi+ebp*1]
- shl ebx,5
  add ecx,edi
+ shl ebx,5
  add edx,edi
  add ebx,edi
  mov eax,ds:dword ptr[0+4+ecx]
@@ -1083,7 +1098,7 @@
  mov ds:dword ptr[_r_p2+16],eax
  mov edi,ds:dword ptr[_r_affinetridesc+16]
  mov ds:dword ptr[_r_p2+20],esi
- mov eax,ds:dword ptr[0-16+edi+ebp*1]
+ mov eax,ds:dword ptr[0+edi]
  test eax,eax
  jnz LFacesFront
  mov eax,ds:dword ptr[24+ecx]
@@ -1108,12 +1123,12 @@
  call near ptr _D_RasterizeAliasPolySmooth
 LNextTri:
  mov esi,ds:dword ptr[_r_affinetridesc+16]
- sub ebp,16
- jnz LNDLoop
+; sub ebp,16
+; jnz LNDLoop
  pop edi
  pop esi
  pop ebx
- pop ebp
+; pop ebp
  add esp,offset (((1024+1 + 1 + ((32 - 1) / 32)) + 1) * 32)
  ret
 _TEXT ENDS
diff -urN asm_id/d_scana.asm asm_raven/d_scana.asm
--- asm_id/d_scana.asm	1996-09-18 13:24:48.000000000 +0300
+++ asm_raven/d_scana.asm	2000-11-10 10:04:36.000000000 +0200
@@ -70,16 +70,6 @@
  externdef _d_pix_max:dword
  externdef _d_y_aspect_shift:dword
  externdef _screenwidth:dword
- externdef _vright:dword
- externdef _vup:dword
- externdef _vpn:dword
- externdef _BOPS_Error:dword
- externdef _snd_scaletable:dword
- externdef _paintbuffer:dword
- externdef _snd_linear_count:dword
- externdef _snd_p:dword
- externdef _snd_vol:dword
- externdef _snd_out:dword
  externdef _r_leftclipped:dword
  externdef _r_leftenter:dword
  externdef _r_rightclipped:dword
@@ -231,6 +221,18 @@
  externdef fp_64kx64k:dword
  externdef pz:dword
  externdef spr8entryvec_table:dword
+ externdef _snd_scaletable:dword
+ externdef _paintbuffer:dword
+ externdef _snd_linear_count:dword
+ externdef _snd_p:dword
+ externdef _snd_vol:dword
+ externdef _snd_out:dword
+ externdef _vright:dword
+ externdef _vup:dword
+ externdef _vpn:dword
+ externdef _BOPS_Error:dword
+ externdef _mainTransTable:dword
+ externdef _scanList:dword
 _DATA SEGMENT
 _DATA ENDS
 _TEXT SEGMENT
@@ -277,5 +279,149 @@
  pop esi
  pop ebp
  ret
+
+
+ align 4
+ public _D_DrawTurbulent8TSpan
+_D_DrawTurbulent8TSpan:
+ push ebp
+ push esi
+ push edi
+ push ebx
+ mov esi,ds:dword ptr[_r_turb_s]
+ mov ecx,ds:dword ptr[_r_turb_t]
+ mov edi,ds:dword ptr[_r_turb_pdest]
+ mov ebx,ds:dword ptr[_r_turb_spancount]
+LlpT:
+ mov eax,ecx
+ mov edx,esi
+ sar eax,16
+ mov ebp,ds:dword ptr[_r_turb_turb]
+ sar edx,16
+ and eax,128-1
+ and edx,128-1
+ mov eax,ds:dword ptr[ebp+eax*4]
+ mov edx,ds:dword ptr[ebp+edx*4]
+ add eax,esi
+ sar eax,16
+ add edx,ecx
+ sar edx,16
+ and eax,64-1
+ and edx,64-1
+ shl edx,6
+ mov ebp,ds:dword ptr[_r_turb_pbase]
+ add edx,eax
+ cmp ds:byte ptr[_scanList + ebx - 1], 1
+ jnz skip1
+ inc edi
+ mov dh,ds:byte ptr[ebp+edx*1]
+ add esi,ds:dword ptr[_r_turb_sstep]
+ mov dl,ds:byte ptr[-1+edi]
+ add ecx,ds:dword ptr[_r_turb_tstep]
+ mov dl,ds:byte ptr[12345678h + edx]
+TranPatch1:
+
+ dec ebx
+ mov ds:byte ptr[-1+edi],dl
+ ;mov ds:byte ptr[-1+edi],255
+ jnz LlpT
+skip2:
+ mov ds:dword ptr[_r_turb_pdest],edi
+ pop ebx
+ pop edi
+ pop esi
+ pop ebp
+ ret
+
+skip1:
+ inc edi
+ dec ebx
+ jnz LlpT
+ jmp skip2
+
+
+
+
+
+
+
+
+ align 4
+ public _D_DrawTurbulent8TQuickSpan
+_D_DrawTurbulent8TQuickSpan:
+ push ebp
+ push esi
+ push edi
+ push ebx
+ mov esi,ds:dword ptr[_r_turb_s]
+ mov ecx,ds:dword ptr[_r_turb_t]
+ mov edi,ds:dword ptr[_r_turb_pdest]
+ mov ebx,ds:dword ptr[_r_turb_spancount]
+LlpTQ:
+ mov eax,ecx
+ mov edx,esi
+ sar eax,16
+ mov ebp,ds:dword ptr[_r_turb_turb]
+ sar edx,16
+ and eax,128-1
+ and edx,128-1
+ mov eax,ds:dword ptr[ebp+eax*4]
+ mov edx,ds:dword ptr[ebp+edx*4]
+ add eax,esi
+ sar eax,16
+ add edx,ecx
+ sar edx,16
+ and eax,64-1
+ and edx,64-1
+ shl edx,6
+ mov ebp,ds:dword ptr[_r_turb_pbase]
+ add edx,eax
+ ;cmp ds:byte ptr[_scanList + ebx - 1], 1
+ ;jnz skip1
+ inc edi
+ mov dh,ds:byte ptr[ebp+edx*1]
+ add esi,ds:dword ptr[_r_turb_sstep]
+ mov dl,ds:byte ptr[-1+edi]
+ add ecx,ds:dword ptr[_r_turb_tstep]
+ mov dl,ds:byte ptr[12345678h + edx]
+TranPatch2:
+
+ dec ebx
+ mov ds:byte ptr[-1+edi],dl
+ jnz LlpTQ
+
+ mov ds:dword ptr[_r_turb_pdest],edi
+ pop ebx
+ pop edi
+ pop esi
+ pop ebp
+ ret
+
+ public _D_DrawTurbulent8TSpanEnd
+_D_DrawTurbulent8TSpanEnd:
+_TEXT ENDS
+
+_DATA SEGMENT
+ align 4
+LPatchTable:
+ dd TranPatch1-4
+ dd TranPatch2-4
+_DATA ENDS
+_TEXT SEGMENT
+ align 4
+ public _R_TranPatch7
+_R_TranPatch7:
+ push ebx
+ mov eax,ds:dword ptr[_mainTransTable]
+ mov ebx,offset LPatchTable
+ mov ecx,2
+LPatchLoop:
+ mov edx,ds:dword ptr[ebx]
+ add ebx,4
+ mov ds:dword ptr[edx],eax
+ dec ecx
+ jnz LPatchLoop
+ pop ebx
+ ret
 _TEXT ENDS
  END
diff -urN asm_id/d_varsa.asm asm_raven/d_varsa.asm
--- asm_id/d_varsa.asm	1996-09-18 13:24:48.000000000 +0300
+++ asm_raven/d_varsa.asm	2000-11-10 10:04:36.000000000 +0200
@@ -210,6 +210,7 @@
  externdef DP_Color:dword
  externdef DP_Pix:dword
  externdef DP_EntryTable:dword
+ externdef DP_EntryTransTable:dword
  externdef pbase:dword
  externdef s:dword
  externdef t:dword
@@ -231,6 +232,7 @@
  externdef fp_64kx64k:dword
  externdef pz:dword
  externdef spr8entryvec_table:dword
+ externdef spr8Tentryvec_table:dword
 _DATA SEGMENT
  align 4
  public _d_sdivzstepu
@@ -293,7 +295,7 @@
 pz dd 0
  public izistep
 izistep dd 0
- public reciprocal_table_16, entryvec_table_16
+ public reciprocal_table_16, entryvec_table_16, entryvec_table_16T
 reciprocal_table_16 dd 040000000h, 02aaaaaaah, 020000000h
  dd 019999999h, 015555555h, 012492492h
  dd 010000000h, 0e38e38eh, 0ccccccch, 0ba2e8bah
@@ -317,7 +319,28 @@
  dd Entry5_16, Entry6_16, Entry7_16, Entry8_16
  dd Entry9_16, Entry10_16, Entry11_16, Entry12_16
  dd Entry13_16, Entry14_16, Entry15_16, Entry16_16
- public DP_Count, DP_u, DP_v, DP_32768, DP_Color, DP_Pix, DP_EntryTable
+
+ externdef Entry2_16T:dword
+ externdef Entry3_16T:dword
+ externdef Entry4_16T:dword
+ externdef Entry5_16T:dword
+ externdef Entry6_16T:dword
+ externdef Entry7_16T:dword
+ externdef Entry8_16T:dword
+ externdef Entry9_16T:dword
+ externdef Entry10_16T:dword
+ externdef Entry11_16T:dword
+ externdef Entry12_16T:dword
+ externdef Entry13_16T:dword
+ externdef Entry14_16T:dword
+ externdef Entry15_16T:dword
+ externdef Entry16_16T:dword
+entryvec_table_16T dd 0, Entry2_16T, Entry3_16T, Entry4_16T
+ dd Entry5_16T, Entry6_16T, Entry7_16T, Entry8_16T
+ dd Entry9_16T, Entry10_16T, Entry11_16T, Entry12_16T
+ dd Entry13_16T, Entry14_16T, Entry15_16T, Entry16_16T
+
+ public DP_Count, DP_u, DP_v, DP_32768, DP_Color, DP_Pix, DP_EntryTable, DP_EntryTransTable
 DP_Count dd 0
 DP_u dd 0
 DP_v dd 0
@@ -329,6 +352,11 @@
  externdef DP_3x3:dword
  externdef DP_4x4:dword
 DP_EntryTable dd DP_1x1, DP_2x2, DP_3x3, DP_4x4
+ externdef DP_T1x1:dword
+ externdef DP_T2x2:dword
+ externdef DP_T3x3:dword
+ externdef DP_T4x4:dword
+DP_EntryTransTable dd DP_T1x1, DP_T2x2, DP_T3x3, DP_T4x4
  public advancetable, sstep, tstep, pspantemp, counttemp, jumptemp
 advancetable dd 0, 0
 sstep dd 0
@@ -358,5 +386,28 @@
  public spr8entryvec_table
 spr8entryvec_table dd 0, Spr8Entry2_8, Spr8Entry3_8, Spr8Entry4_8
  dd Spr8Entry5_8, Spr8Entry6_8, Spr8Entry7_8, Spr8Entry8_8
+
+ externdef Spr8Entry2_8T:dword
+ externdef Spr8Entry3_8T:dword
+ externdef Spr8Entry4_8T:dword
+ externdef Spr8Entry5_8T:dword
+ externdef Spr8Entry6_8T:dword
+ externdef Spr8Entry7_8T:dword
+ externdef Spr8Entry8_8T:dword
+ public spr8Tentryvec_table
+spr8Tentryvec_table dd 0, Spr8Entry2_8T, Spr8Entry3_8T, Spr8Entry4_8T
+ dd Spr8Entry5_8T, Spr8Entry6_8T, Spr8Entry7_8T, Spr8Entry8_8T
+
+ externdef Spr8Entry2_8T2:dword
+ externdef Spr8Entry3_8T2:dword
+ externdef Spr8Entry4_8T2:dword
+ externdef Spr8Entry5_8T2:dword
+ externdef Spr8Entry6_8T2:dword
+ externdef Spr8Entry7_8T2:dword
+ externdef Spr8Entry8_8T2:dword
+ public spr8T2entryvec_table
+spr8T2entryvec_table dd 0, Spr8Entry2_8T2, Spr8Entry3_8T2, Spr8Entry4_8T2
+ dd Spr8Entry5_8T2, Spr8Entry6_8T2, Spr8Entry7_8T2, Spr8Entry8_8T2
+
 _DATA ENDS
  END
diff -urN asm_id/r_aliasa.asm asm_raven/r_aliasa.asm
--- asm_id/r_aliasa.asm	1996-09-18 13:24:48.000000000 +0300
+++ asm_raven/r_aliasa.asm	2000-11-10 10:04:42.000000000 +0200
@@ -70,16 +70,6 @@
  externdef _d_pix_max:dword
  externdef _d_y_aspect_shift:dword
  externdef _screenwidth:dword
- externdef _vright:dword
- externdef _vup:dword
- externdef _vpn:dword
- externdef _BOPS_Error:dword
- externdef _snd_scaletable:dword
- externdef _paintbuffer:dword
- externdef _snd_linear_count:dword
- externdef _snd_p:dword
- externdef _snd_vol:dword
- externdef _snd_out:dword
  externdef _r_leftclipped:dword
  externdef _r_leftenter:dword
  externdef _r_rightclipped:dword
@@ -231,6 +221,16 @@
  externdef fp_64kx64k:dword
  externdef pz:dword
  externdef spr8entryvec_table:dword
+ externdef _snd_scaletable:dword
+ externdef _paintbuffer:dword
+ externdef _snd_linear_count:dword
+ externdef _snd_p:dword
+ externdef _snd_vol:dword
+ externdef _snd_out:dword
+ externdef _vright:dword
+ externdef _vup:dword
+ externdef _vpn:dword
+ externdef _BOPS_Error:dword
 _DATA SEGMENT
 Lfloat_1 dd 1.0
 Ltemp dd 0
@@ -242,85 +242,86 @@
  push ebp
  push edi
  push esi
- mov esi,ds:dword ptr[_r_apverts]
- mov ebp,ds:dword ptr[12+8+esp]
- mov edi,ds:dword ptr[12+4+esp]
- mov ecx,ds:dword ptr[_r_anumverts]
+ mov esi,dword ptr[_r_apverts]
+ mov ebp,dword ptr[12+8+esp]
+ mov edi,dword ptr[12+4+esp]
+ mov ecx,dword ptr[_r_anumverts]
  sub edx,edx
 Lloop:
- mov dl,ds:byte ptr[esi]
- mov ds:byte ptr[Lcoords],dl
- fild ds:dword ptr[Lcoords]
- mov dl,ds:byte ptr[1+esi]
- mov ds:byte ptr[Lcoords+4],dl
- fild ds:dword ptr[Lcoords+4]
- mov dl,ds:byte ptr[2+esi]
- mov ds:byte ptr[Lcoords+8],dl
- fild ds:dword ptr[Lcoords+8]
+ mov dl,byte ptr[esi]
+ mov byte ptr[Lcoords],dl
+ fild dword ptr[Lcoords]
+ mov dl,byte ptr[1+esi]
+ mov byte ptr[Lcoords+4],dl
+ fild dword ptr[Lcoords+4]
+ mov dl,byte ptr[2+esi]
+ mov byte ptr[Lcoords+8],dl
+ fild dword ptr[Lcoords+8]
  fld st(2)
- fmul ds:dword ptr[_aliastransform+32]
+ fmul dword ptr[_aliastransform+32]
  fld st(2)
- fmul ds:dword ptr[_aliastransform+36]
+ fmul dword ptr[_aliastransform+36]
  fxch st(1)
- fadd ds:dword ptr[_aliastransform+44]
+ fadd dword ptr[_aliastransform+44]
  fld st(2)
- fmul ds:dword ptr[_aliastransform+40]
+ fmul dword ptr[_aliastransform+40]
  fxch st(1)
  faddp st(2),st(0)
- mov dl,ds:byte ptr[3+esi]
- mov eax,ds:dword ptr[4+ebp]
- mov ds:dword ptr[0+8+edi],eax
+ mov dl,byte ptr[3+esi]
+; mov eax,dword ptr[4+ebp]	;load .s
+; mov dword ptr[0+8+edi],eax	;store .s
  faddp st(1),st(0)
- mov eax,ds:dword ptr[8+ebp]
- mov ds:dword ptr[0+12+edi],eax
- fdivr ds:dword ptr[Lfloat_1]
- mov eax,ds:dword ptr[0+ebp]
- mov ds:dword ptr[24+edi],eax
- mov eax,ds:dword ptr[32+edi]
- mov eax,ds:dword ptr[12+ebp]
- mov eax,ds:dword ptr[4+esi]
- lea eax,ds:dword ptr[edx+edx*2]
+; mov eax,dword ptr[8+ebp]	;.t
+; mov dword ptr[0+12+edi],eax	;.t
+ fdivr dword ptr[Lfloat_1]
+; mov eax,dword ptr[0+ebp]	; .onseam
+; mov dword ptr[24+edi],eax
+ 
+ mov eax,dword ptr[32+edi]
+ mov eax,dword ptr[12+ebp]
+ mov eax,dword ptr[4+esi]
+ lea eax,dword ptr[edx+edx*2]
  fxch st(3)
- fld ds:dword ptr[_r_avertexnormals+eax*4]
- fmul ds:dword ptr[_r_plightvec]
- fld ds:dword ptr[_r_avertexnormals+4+eax*4]
- fmul ds:dword ptr[_r_plightvec+4]
- fld ds:dword ptr[_r_avertexnormals+8+eax*4]
- fmul ds:dword ptr[_r_plightvec+8]
+ fld dword ptr[_r_avertexnormals+eax*4]
+ fmul dword ptr[_r_plightvec]
+ fld dword ptr[_r_avertexnormals+4+eax*4]
+ fmul dword ptr[_r_plightvec+4]
+ fld dword ptr[_r_avertexnormals+8+eax*4]
+ fmul dword ptr[_r_plightvec+8]
  fxch st(1)
  faddp st(2),st(0)
  fld st(2)
- fmul ds:dword ptr[_aliastransform+0]
+ fmul dword ptr[_aliastransform+0]
  fxch st(2)
  faddp st(1),st(0)
- fst ds:dword ptr[Ltemp]
- mov eax,ds:dword ptr[_r_ambientlight]
- mov dl,ds:byte ptr[Ltemp+3]
+ fst dword ptr[Ltemp]
+ mov eax,dword ptr[_r_ambientlight]
+ mov dl,byte ptr[Ltemp+3]
  test dl,080h
  jz Lsavelight
- fmul ds:dword ptr[_r_shadelight]
- fistp ds:dword ptr[Ltemp]
- add eax,ds:dword ptr[Ltemp]
+ fmul dword ptr[_r_shadelight]
+ fistp dword ptr[Ltemp]
+ add eax,dword ptr[Ltemp]
  jns Lp1
  sub eax,eax
 Lp1:
  fxch st(1)
- fmul ds:dword ptr[_aliastransform+16]
+ fmul dword ptr[_aliastransform+16]
  fxch st(3)
  fld st(0)
- fmul ds:dword ptr[_aliastransform+4]
+ fmul dword ptr[_aliastransform+4]
  fxch st(1)
- mov ds:dword ptr[0+16+edi],eax
- fmul ds:dword ptr[_aliastransform+20]
+ mov dword ptr[0+16+edi],eax
+ fmul dword ptr[_aliastransform+20]
  fxch st(2)
- fadd ds:dword ptr[_aliastransform+12]
+ fadd dword ptr[_aliastransform+12]
  fxch st(4)
- fadd ds:dword ptr[_aliastransform+28]
+ fadd dword ptr[_aliastransform+28]
  fxch st(3)
  fld st(0)
- fmul ds:dword ptr[_aliastransform+8]
+ fmul dword ptr[_aliastransform+8]
  fxch st(1)
- fmul ds:dword ptr[_aliastransform+24]
+ fmul dword ptr[_aliastransform+24]
  fxch st(5)
  faddp st(2),st(0)
  fxch st(3)
@@ -333,13 +334,13 @@
  fxch st(1)
  fmul st(0),st(2)
  fxch st(1)
- fadd ds:dword ptr[_aliasxcenter]
+ fadd dword ptr[_aliasxcenter]
  fxch st(1)
- fadd ds:dword ptr[_aliasycenter]
+ fadd dword ptr[_aliasycenter]
  fxch st(2)
- fistp ds:dword ptr[0+20+edi]
- fistp ds:dword ptr[0+0+edi]
- fistp ds:dword ptr[0+4+edi]
+ fistp dword ptr[0+20+edi]
+ fistp dword ptr[0+0+edi]
+ fistp dword ptr[0+4+edi]
  add edi,32
  dec ecx
  jnz Lloop
diff -urN asm_id/r_edgea.asm asm_raven/r_edgea.asm
--- asm_id/r_edgea.asm	1996-09-18 13:24:48.000000000 +0300
+++ asm_raven/r_edgea.asm	2000-11-10 10:04:42.000000000 +0200
@@ -70,16 +70,6 @@
  externdef _d_pix_max:dword
  externdef _d_y_aspect_shift:dword
  externdef _screenwidth:dword
- externdef _vright:dword
- externdef _vup:dword
- externdef _vpn:dword
- externdef _BOPS_Error:dword
- externdef _snd_scaletable:dword
- externdef _paintbuffer:dword
- externdef _snd_linear_count:dword
- externdef _snd_p:dword
- externdef _snd_vol:dword
- externdef _snd_out:dword
  externdef _r_leftclipped:dword
  externdef _r_leftenter:dword
  externdef _r_rightclipped:dword
@@ -231,11 +221,27 @@
  externdef fp_64kx64k:dword
  externdef pz:dword
  externdef spr8entryvec_table:dword
+ externdef _snd_scaletable:dword
+ externdef _paintbuffer:dword
+ externdef _snd_linear_count:dword
+ externdef _snd_p:dword
+ externdef _snd_vol:dword
+ externdef _snd_out:dword
+ externdef _vright:dword
+ externdef _vup:dword
+ externdef _vpn:dword
+ externdef _BOPS_Error:dword
+ externdef _R_SurfacePatchT:dword
+ externdef _R_GenerateSpansT:dword
 _DATA SEGMENT
 Ltemp dd 0
 float_1_div_0100000h dd 035800000h
 float_point_999 dd 0.999
 float_1_point_001 dd 1.001
+
+ public _FoundTrans
+_FoundTrans dd 0
+
 _DATA ENDS
 _TEXT SEGMENT
  public _R_EdgeCodeStart
@@ -396,6 +402,11 @@
  ret
  align 4
 TrailingEdge:
+
+;rj
+ bt ds:dword ptr[24+esi],7   ; surf->flags & SURF_TRANSLUCENT
+ jc LInverted2
+
  mov eax,ds:dword ptr[20+esi]
  dec eax
  jnz LInverted
@@ -429,6 +440,8 @@
  mov ds:dword ptr[0+esi],edx
  mov ds:dword ptr[4+edx],esi
  ret
+LNoEmit3:
+ mov ds:dword ptr[_FoundTrans],1
 LNoEmit2:
  mov ds:dword ptr[16+ecx],eax
  mov edx,ds:dword ptr[0+esi]
@@ -445,6 +458,12 @@
 LInverted:
  mov ds:dword ptr[20+esi],eax
  ret
+
+;rj
+LInverted2:
+ mov ds:dword ptr[_FoundTrans],1
+ ret
+
 Lgs_trailing:
  push offset Lgs_nextedge
  jmp TrailingEdge
@@ -454,6 +473,8 @@
  push edi
  push esi
  push ebx
+ mov ds:dword ptr[_FoundTrans],0  ; rj
+
  mov eax,ds:dword ptr[_surfaces]
  mov edx,ds:dword ptr[_edge_head_u_shift20]
  add eax,64
@@ -484,6 +505,14 @@
  add edi,eax
  mov esi,ds:dword ptr[12345678h]
 LPatch2:
+
+;rj
+ bt ds:dword ptr[24+edi],7   ; surf->flags & SURF_TRANSLUCENT
+ jnc Skip
+ mov ds:dword ptr[_FoundTrans],1
+ jmp Lgs_nextedge
+
+Skip:
  mov edx,ds:dword ptr[20+edi]
  mov eax,ds:dword ptr[40+edi]
  test eax,eax
@@ -584,6 +613,11 @@
  mov ds:dword ptr[16+edi],eax
  cmp eax,edx
  jle LInsertAndExit
+
+;rj
+; bt ds:dword ptr[24+esi],7   ; surf->flags & SURF_TRANSLUCENT
+; jc LInsertAndExit
+
  sub eax,edx
  mov ds:dword ptr[0+ebp],edx
  mov ds:dword ptr[8+ebp],eax
@@ -626,6 +660,11 @@
 LPatch4:
  jnz Lgs_resetspanstate
  mov ds:dword ptr[_span_p],ebp
+
+ ;cmp ds:dword ptr[_FoundTrans],1
+ ;jne Done
+ ;call near ptr _R_GenerateSpansT
+Done:
  pop ebx
  pop esi
  pop edi
@@ -685,6 +724,7 @@
  public _R_EdgeCodeEnd
 _R_EdgeCodeEnd:
  align 4
+
  public _R_SurfacePatch
 _R_SurfacePatch:
  mov eax,ds:dword ptr[_surfaces]
@@ -694,6 +734,7 @@
  mov ds:dword ptr[LPatch0-4],eax
  mov ds:dword ptr[LPatch2-4],eax
  mov ds:dword ptr[LPatch3-4],eax
+ call near ptr _R_SurfacePatchT
  ret
 _TEXT ENDS
  END

