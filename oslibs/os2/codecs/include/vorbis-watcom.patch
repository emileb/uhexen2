--- vorbis/lib/os.h~
+++ vorbis/lib/os.h
@@ -33,6 +33,8 @@
 #    define STIN static __inline__
 #  elif _WIN32
 #    define STIN static __inline
+#  elif defined __WATCOMC__
+#    define STIN static __inline
 #  else
 #    define STIN static
 #  endif
@@ -52,6 +54,11 @@
 #  define FAST_HYPOT(a, b) sqrt((a)*(a) + (b)*(b))
 #endif
 
+#ifdef __WATCOMC__
+extern double rint(double);
+#pragma aux rint parm [8087] value [8087] = "frndint";
+#endif
+
 #if defined(__SYMBIAN32__) && defined(__WINS__)
 void *_alloca(size_t size);
 #  define alloca _alloca
@@ -118,6 +125,32 @@
 #endif /* Special i386 GCC implementation */
 
 
+/* Watcom inline assembly. */
+#if defined(__WATCOMC__)
+#  define VORBIS_FPU_CONTROL
+
+typedef ogg_int16_t vorbis_fpu_control;
+
+__inline int vorbis_ftoi(double);
+#pragma aux vorbis_ftoi = \
+    "push  eax" \
+    "fistp qword ptr [esp]" \
+    "pop   eax" \
+    parm [8087] \
+    value [eax] \
+    modify exact [eax];
+
+static __inline void vorbis_fpu_setround(vorbis_fpu_control *fpu){
+  (void)fpu;
+}
+
+static __inline void vorbis_fpu_restore(vorbis_fpu_control fpu){
+  (void)fpu;
+}
+
+#endif /* Watcom implementation */
+
+
 /* MSVC inline assembly. 32 bit only; inline ASM isn't implemented in the
  * 64 bit compiler and doesn't work on arm. */
 #if defined(_MSC_VER) && !defined(_WIN64) && \

--- /dev/null
+++ vorbis/lib/Makefile.os2
@@ -0,0 +1,26 @@
+# build vorbis & vorbisfile using OpenWatcom for OS/2 as static libaries.
+#
+
+CFLAGS  = -bt=os2 -bm -fp5 -fpi87 -mf -oeatxh -w4 -ei -j -zp8
+# -5s  :  Pentium stack calling conventions.
+# -5r  :  Pentium register calling conventions.
+CFLAGS += -5s
+CFLAGS += -I../include
+CPPFLAGS= -DHAVE_ALLOCA_H
+LIBNAME = vorbis.lib
+LIBNAME2= vorbisfile.lib
+
+COMPILE = wcc386 -q $(CFLAGS) $(CPPFLAGS)
+
+OBJ = mdct.obj smallft.obj block.obj envelope.obj window.obj lsp.obj lpc.obj analysis.obj synthesis.obj psy.obj info.obj floor1.obj floor0.obj res0.obj mapping0.obj registry.obj codebook.obj sharedbook.obj lookup.obj bitrate.obj
+OBJ2= vorbisfile.obj
+
+all: $(LIBNAME) $(LIBNAME2)
+
+$(LIBNAME): $(OBJ)
+	wlib -q -b -n $@ $(OBJ)
+$(LIBNAME2): $(OBJ2)
+	wlib -q -b -n $@ $(OBJ2)
+
+.c.obj:
+	$(COMPILE) -fo=$^@ $<
