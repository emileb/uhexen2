Initial implementation for Amiga CyberGraphx double buffered video
(software renderer) by Szilard Biro.  Known issues need addressing:

- screenshot freezes the game.
- enabling r_speeds or r_dspeeds freezes the game.
- extensive re-testing needed in uhexen2-v1.5.9 .

Index: engine/h2shared/vid_cgx.c
===================================================================
--- engine/h2shared/vid_cgx.c	(revision 5950)
+++ engine/h2shared/vid_cgx.c	(working copy)
@@ -92,6 +92,16 @@
 #endif /* USE_C2P */
 #endif
 
+/* CyberGraphx double buffer support */
+static struct ScreenBuffer *screenbuffers[2] = {NULL, NULL};
+static struct MsgPort *writeport = NULL;
+static struct MsgPort *changeport = NULL;
+static int currentbuffer = 0;
+static qboolean safetochange = true;
+static qboolean safetowrite = true;
+static int lockcount;
+static APTR lockhandle = NULL;
+
 /* ----------------------------------------- */
 
 static unsigned char	vid_curpal[256*3];	/* save for mode changes */
@@ -530,6 +540,35 @@ static void VID_DestroyWindow (void)
 	}
 #endif
 
+	if (changeport && !safetochange)
+		while (!GetMsg(changeport))
+			WaitPort(changeport);
+	if (writeport && !safetowrite)
+		while (!GetMsg(writeport))
+			WaitPort(writeport);
+
+	if (screenbuffers[0])
+	{
+		FreeScreenBuffer(screen, screenbuffers[0]);
+		screenbuffers[0] = NULL;
+	}
+	if (screenbuffers[1])
+	{
+		FreeScreenBuffer(screen, screenbuffers[1]);
+		screenbuffers[1] = NULL;
+	}
+
+	if (changeport)
+	{
+		DeleteMsgPort(changeport);
+		changeport = NULL;
+	}
+	if (writeport)
+	{
+		DeleteMsgPort(writeport);
+		writeport = NULL;
+	}
+
 	if (screen)
 	{
 		CloseScreen(screen);
@@ -570,6 +609,8 @@ static qboolean VID_SetMode (int modenum
 
 	flags = WFLG_ACTIVATE | WFLG_RMBTRAP;
 
+	vid.numpages = 1;
+
 	if (vid_config_fscr.integer)
 	{
 		ULONG ModeID;
@@ -590,6 +631,46 @@ static qboolean VID_SetMode (int modenum
 			SA_Quiet, TRUE,
 			TAG_DONE);
 
+		if (CyberGfxBase && screen &&
+			GetCyberMapAttr(screen->RastPort.BitMap, CYBRMATTR_DEPTH) == 8 &&
+			GetCyberMapAttr(screen->RastPort.BitMap, CYBRMATTR_ISLINEARMEM))
+		{
+			screenbuffers[0] = AllocScreenBuffer(screen, NULL, SB_SCREEN_BITMAP);
+			screenbuffers[1] = AllocScreenBuffer(screen, NULL, 0);
+			if (screenbuffers[0] && screenbuffers[1])
+			{
+				writeport = CreateMsgPort();
+				changeport = CreateMsgPort();
+				if (writeport && changeport)
+				{
+					screenbuffers[0]->sb_DBufInfo->dbi_SafeMessage.mn_ReplyPort = writeport;
+					screenbuffers[0]->sb_DBufInfo->dbi_DispMessage.mn_ReplyPort = changeport;
+					screenbuffers[1]->sb_DBufInfo->dbi_SafeMessage.mn_ReplyPort = writeport;
+					screenbuffers[1]->sb_DBufInfo->dbi_DispMessage.mn_ReplyPort = changeport;
+					// double buffering possible
+					currentbuffer = 0;
+					vid.numpages = 2;
+					safetochange = true;
+					safetowrite = true;
+				}
+				else
+				{
+					FreeScreenBuffer(screen, screenbuffers[0]);
+					FreeScreenBuffer(screen, screenbuffers[1]);
+					if (writeport) DeleteMsgPort(writeport);
+					if (changeport) DeleteMsgPort(changeport);
+					screenbuffers[0] = screenbuffers[1] = NULL;
+					writeport = changeport = NULL;
+				}
+			}
+			else
+			{
+				if (screenbuffers[0]) FreeScreenBuffer(screen, screenbuffers[0]);
+				if (screenbuffers[1]) FreeScreenBuffer(screen, screenbuffers[1]);
+				screenbuffers[0] = screenbuffers[1] = NULL;
+			}
+		}
+
 #ifdef USE_C2P
 		currentBitMap = 0;
 		bm = screen->RastPort.BitMap;
@@ -636,12 +717,13 @@ static qboolean VID_SetMode (int modenum
 		if (pointermem) {*/
 			vid.height = vid.conheight = modelist[modenum].height;
 			vid.rowbytes = vid.conrowbytes = vid.width = vid.conwidth = modelist[modenum].width;
-			buffer = (pixel_t *) malloc(vid.width * vid.height);
+			if (vid.numpages == 1)
+				buffer = (pixel_t *) malloc(vid.width * vid.height);
 
-			if (buffer)
+			if (buffer || vid.numpages > 1)
 			{
+				/* if(vid.numpages > 1) VID_LockBuffer sets vid.buffer */
 				vid.buffer = vid.direct = vid.conbuffer = buffer;
-				vid.numpages = 1;
 				vid.aspect = ((float)vid.height / (float)vid.width) * (320.0 / 240.0);
 
 				if (VID_AllocBuffers (vid.width, vid.height))
@@ -735,10 +817,58 @@
 
 void VID_LockBuffer(void)
 {
+	if (vid.numpages == 1)
+		return;
+
+	lockcount++;
+
+	if (lockcount > 1)
+		return;
+
+	if (!safetowrite)
+		while (!GetMsg(writeport))
+			WaitPort(writeport);
+
+	safetowrite = true;
+
+	lockhandle = LockBitMapTags(screenbuffers[currentbuffer^1]->sb_BitMap,
+		LBMI_BYTESPERROW, (IPTR)&vid.rowbytes,
+		LBMI_BASEADDRESS, (IPTR)&vid.buffer,
+		TAG_DONE);
+
+	if (!lockhandle)
+		Sys_Error ("%s: failed LockBitMapTags()", __thisfunc__);
+
+	// Update surface pointer for linear access modes
+	vid.conbuffer = vid.direct = vid.buffer;
+	vid.conrowbytes = vid.rowbytes;
+
+	if (r_dowarp)
+		d_viewbuffer = r_warpbuffer;
+	else
+		d_viewbuffer = vid.buffer;
+
+	if (r_dowarp)
+		screenwidth = WARP_WIDTH;
+	else
+		screenwidth = vid.rowbytes;
 }
 
 void VID_UnlockBuffer(void)
 {
+	if (vid.numpages == 1)
+		return;
+
+	lockcount--;
+
+	if (lockcount > 0)
+		return;
+
+	if (lockcount < 0)
+		Sys_Error ("Unbalanced unlock");
+
+	UnLockBitMap(lockhandle);
+	lockhandle = NULL;
 }
 
 
@@ -1027,6 +1157,20 @@ static void FlipScreen (vrect_t *rects)
 	}
 #endif
 
+	if (vid.numpages > 1)
+	{
+		if (!safetochange)
+			while (!GetMsg(changeport))
+				WaitPort(changeport);
+
+		safetochange = true;
+		currentbuffer ^= 1;
+		ChangeScreenBuffer(screen, screenbuffers[currentbuffer]);
+		safetochange = false;
+		safetowrite = false;
+		return;
+	}
+
 	while (rects)
 	{
 #ifdef PLATFORM_AMIGAOS3
@@ -1128,7 +1272,22 @@ void D_EndDirectRect (int x, int y, int 
 
 	if (screen)
 	{
-		WritePixelArray(directbitmap, 0, 0, width, window->RPort, x, y, width, height, RECTFMT_LUT8);
+		if (vid.numpages == 1)
+		{
+			WritePixelArray(directbitmap, 0, 0, width, window->RPort, x, y, width, height, RECTFMT_LUT8);
+		}
+		else
+		{
+			struct RastPort rastport;
+
+			if (lockcount > 0)
+				return;
+
+			InitRastPort(&rastport);
+			rastport.BitMap = screenbuffers[currentbuffer]->sb_BitMap;
+
+			WritePixelArray(directbitmap, 0, 0, width, &rastport, x, y, width, height, RECTFMT_LUT8);
+		}
 	}
 	else
 	{

