This patch resulted after a feature request [ 1597004 ] at our tracker:
http://sourceforge.net/tracker/index.php?func=detail&aid=1597004&group_id=124987&atid=701009

Initial support for allowing ogg, mp3, and mod (mod, it, s3m) external
music files to be played instead of the original midi files. The music
files are searched first under <install_dir>/data1/music and then under
~/.hexen2/data1/music. In the first pass, the original midi filename is
searched with a proper extension. If nothing is found, then trackXX is
searched similarly (XX : cd-track number for the running map). If it is
not found either, then the original midi file is played.
Note: replace data1 with portals for the mission pack. If you are running
a mod, then replace it with the mod's name. A more technical explanation:
the music files are searched under the 'music' directories of the whole
of the game's internal search path.

Do remember that this depends on SDL_mixer and whatever option it was
compiled with: It needs mikmod for mod files, ogg/vorbis libraries for
ogg files, and smpeg, or preferably libmad, for mp3 files. If, say, it
wasn't linked against smpeg or libmad, then mp3 files won't be played.

In the game, choose midi as the background music format and you'll be
ready to go.


--- midi_sdl.c~	2007-04-02 23:44:55.000000000 +0300
+++ midi_sdl.c	2007-04-02 23:45:34.000000000 +0300
@@ -99,6 +99,7 @@ qboolean MIDI_Init(void)
 	int audio_channels = 2;
 	int audio_buffers = 4096;
 
+	char	musicdir[MAX_OSPATH];
 	void	*selfsyms;
 	const SDL_version *smixer_version;
 	SDL_version *(*Mix_Linked_Version_fp)(void) = NULL;
@@ -170,6 +171,9 @@ bad_version:
 	if (midi_endmusicfnc)
 		Mix_HookMusicFinished(midi_endmusicfnc);
 
+	Q_snprintf_err(musicdir, sizeof(musicdir), "%s/music", fs_userdir);
+	Sys_mkdir (musicdir);
+
 	Con_Printf("MIDI music initialized.\n");
 
 	Cmd_AddCommand ("midi_play", MIDI_Play_f);
@@ -220,10 +224,27 @@ static int MIDI_ExtractFile (FILE *inFil
 
 #define	TEMP_MUSICNAME	"tmpmusic"
 
+static const struct
+{
+	char		*ext;		/* the file extension		*/
+	char		*dir;		/* the directory to look in	*/
+	int		cdrip;		/* allow as a rip'ped cd track	*/
+} MusicFile[] =
+{
+	{   "ogg", "music", 1	},
+	{   "mp3", "music", 1	},
+	{   "mod", "music", 0	},
+	{   "it",  "music", 0	},
+	{   "s3m", "music", 0	},
+	{   "mid", "midi",  0	},	/* midi must be the last before NULL	*/
+	{   NULL,   NULL,   0	}	/* the last entry must be NULL		*/
+};
+
 void MIDI_Play (const char *Name)
 {
 	FILE		*midiFile;
 	char	midiName[MAX_OSPATH], tempName[MAX_QPATH];
+	int			i, search_cdrip;
 
 	if (!bMidiInited)	//don't try to play if there is no midi
 		return;
@@ -236,11 +257,50 @@ void MIDI_Play (const char *Name)
 		return;
 	}
 
-	snprintf (tempName, sizeof(tempName), "%s.%s", Name, "mid");
-	QIO_FOpenFile (va("%s/%s", "midi", tempName), &midiFile, false);
+	search_cdrip = 0;
+retry:
+	i = 0;
+	if (search_cdrip)
+	{
+		Con_Printf ("trying a cd-rip for track %d\n", cl.cdtrack);
+	}
+	while (MusicFile[i].ext != NULL)
+	{
+		if ( !strcmp(MusicFile[i].ext, "mid") )
+		{
+			if (!search_cdrip)
+			{
+				search_cdrip = 1;
+				goto retry;
+			}
+			else
+			{
+				search_cdrip = 0;
+				Con_Printf ("trying a midi file\n");
+			}
+		}
+		if (search_cdrip)
+		{
+			if (!MusicFile[i].cdrip)
+			{
+				++i;
+				continue;
+			}
+			snprintf (tempName, sizeof(tempName), "track%02d.%s", cl.cdtrack, MusicFile[i].ext);
+		}
+		else
+		{
+			snprintf (tempName, sizeof(tempName), "%s.%s", Name, MusicFile[i].ext);
+		}
+		QIO_FOpenFile (va("%s/%s", MusicFile[i].dir, tempName), &midiFile, false);
+		if (midiFile)
+			break;
+		++i;
+	}
+
 	if (!midiFile)
 	{
-		Con_Printf("music file %s not found\n", tempName);
+		Con_Printf("no music file for %s was found\n", Name);
 		return;
 	}
 	else
@@ -250,7 +310,7 @@ void MIDI_Play (const char *Name)
 			int		ret;
 
 			Con_Printf("Extracting %s from pakfile\n", tempName);
-			snprintf (midiName, sizeof(midiName), "%s/%s.%s", host_parms->userdir, TEMP_MUSICNAME, "mid");
+			snprintf (midiName, sizeof(midiName), "%s/%s.%s", host_parms->userdir, TEMP_MUSICNAME, MusicFile[i].ext);
 			ret = MIDI_ExtractFile (midiFile, midiName, qio_filesize);
 			fclose (midiFile);
 			if (ret != 0)
@@ -262,7 +322,7 @@ void MIDI_Play (const char *Name)
 		else	/* use the file directly */
 		{
 			fclose (midiFile);
-			snprintf (midiName, sizeof(midiName), "%s/%s/%s", qio_filepath, "midi", tempName);
+			snprintf (midiName, sizeof(midiName), "%s/%s/%s", qio_filepath, MusicFile[i].dir, tempName);
 		}
 	}
 

