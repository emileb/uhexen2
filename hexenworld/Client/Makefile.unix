#
# Valid targets:
#
# hw_dynamic, glhw_dynamic :  HexenWorld Client, dynamically linked binaries,
# hw_static,  glhw_static  :  HexenWorld Client, statically linked binaries
#
#
# Build Options:
#
# USEMIDI :	yes  =	Include MIDI music support (default).
#		no   =	Don't include MIDI music support.
#		MIDI needs SDL_mixer (built with Timidity support)
#		and Timidity patches.
#
# USEALSA :	yes  =	Include ALSA sound support (default).
#		no   =	Don't include alsa support.
#		Requires alsa-lib and alsa-kernel modules >= 1.0.1
#		(0.9.8 and 1.0.0 should also work, but isn't supported.)
#		On any platform other than Linux, ALSA support will be
#		automatically be disabled.
#
# USE_SDLCD:	no   =	Don't use SDL cdaudio (default); platform specific
#			cdrom code will be used.  The only problem with
#			SDL_cdrom is that it lacks proper volume controls.
#		yes  =	Use SDL for cdaudio instead of platform specific code
#
# To build using a different compiler:	make CC=compiler_name [other stuff]
#
# To build for the demo version:	make DEMO=1 [other stuff]
#
# if building a debug version :		make DEBUG=1 [other stuff]
#

USEMIDI=yes
USEALSA=yes
USE_SDLCD=no

GL_BINARY=glhwcl
GL_BINARY_STATIC=glhwcl.static

BINARY=hwcl
BINARY_STATIC=hwcl.static

AS = nasm
ifndef CC
CC = gcc
endif
LINKER = $(CC)

ifdef DEBUG
CFLAGS = -DDEBUG_BUILD -g -Wall -DPLATFORM_UNIX
else
CFLAGS = -O2 -march=i586 -Wall -DPLATFORM_UNIX \
	-fomit-frame-pointer -ffast-math -fexpensive-optimizations \
	-falign-loops=2 -falign-jumps=2 -falign-functions=2

endif

GAMEFLAGS = -DH2W
X11FLAGS = -I/usr/X11R6/include
SDLFLAGS = `sdl-config --cflags`
SDLLINK = `sdl-config --libs`
LDFLAGS =
GLFLAGS = -L/usr/X11R6/lib
ASFLAGS = -f elf
LDSTATIC = -Wl,-Bstatic -L/usr/lib -lSDL_mixer -lSDL -L/usr/X11R6/lib -lX11 -lXext -ldl -L/usr/X11R6/lib -lXxf86dga -lXxf86vm -lXv -L/usr/lib/ -lsmpeg -lvorbisfile -lvorbis -logg -lm -Wl,-Bdynamic -lpthread

ifeq "$(BUILDGL)" "yes"
GAMEFLAGS+= -DGLQUAKE
endif

ifeq "$(USEMIDI)" "yes"
GAMEFLAGS+= -DUSE_MIDI
SDLLINK+= -lSDL_mixer
endif

ifeq "$(USEALSA)" "no"
GAMEFLAGS+= -DNO_ALSA
endif

ifeq "$(USE_SDLCD)" "yes"
GAMEFLAGS+= -DWITH_SDLCD
endif

ifdef DEMO
GAMEFLAGS+= -DDEMOBUILD
endif

# Rules for turning source files into .o files
%.o: %.c
	$(CC) -c $(CFLAGS) $(X11FLAGS) $(SDLFLAGS) $(GAMEFLAGS) -o $@ $<
%.o: %.asm
	$(AS) $(ASFLAGS) -o $@ $<

SOFTOBJS = d_edge.o \
	d_fill.o \
	d_init.o \
	d_modech.o \
	d_part.o \
	d_polyse.o \
	d_scan.o \
	d_sky.o \
	d_sprite.o \
	d_surf.o \
	d_vars.o \
	d_zpoint.o \
	draw.o \
	model.o \
	r_aclip.o \
	r_alias.o \
	r_bsp.o \
	r_draw.o \
	r_edge.o \
	r_efrag.o \
	r_light.o \
	r_main.o \
	r_misc.o \
	r_sky.o \
	r_sprite.o \
	r_surf.o \
	r_vars.o \
	screen.o \
	vid_sdl.o \
	d_draw.o \
	d_draw16.o \
	d_draw16t.o \
	d_parta.o \
	d_polysa.o \
	d_polysa2.o \
	d_polysa3.o \
	d_polysa4.o \
	d_polysa5.o \
	d_scana.o \
	d_spr8.o \
	d_spr8t.o \
	d_spr8t2.o \
	d_varsa.o \
	r_aclipa.o \
	r_aliasa.o \
	r_drawa.o \
	r_edgea.o \
	r_edgeb.o \
	r_varsa.o \
	surf16.o \
	surf8.o

GLOBJS = gl_draw.o \
	gl_mesh.o \
	gl_model.o \
	gl_ngraph.o \
	gl_refrag.o \
	gl_rlight.o \
	gl_rmain.o \
	gl_rmisc.o \
	gl_rsurf.o \
	gl_screen.o \
	gl_test.o \
	gl_warp.o \
	gl_vidsdl.o

COMMONOBJS = cd_unix.o \
	cl_cam.o \
	cl_demo.o \
	cl_effect.o \
	cl_ents.o \
	cl_input.o \
	cl_main.o \
	cl_parse.o \
	cl_pred.o \
	cl_tent.o \
	cmd.o \
	common.o \
	console.o \
	crc.o \
	cvar.o \
	in_sdl.o \
	keys.o \
	mathlib.o \
	menu.o \
	midi_sdl.o \
	net_wins.o \
	net_chan.o \
	pmove.o \
	pmovetst.o \
	r_part.o \
	sbar.o \
	skin.o \
	snd_dma.o \
	snd_mix.o \
	snd_mem.o \
	snd_oss.o \
	snd_sdl.o \
	snd_alsa.o \
	strings.o \
	sys_unix.o \
	view.o \
	wad.o \
	zone.o \
	math.o \
	snd_mixa.o \
	sys_wina.o

glhw_dynamic: GAMEFLAGS+= -DGLQUAKE
glhw_dynamic: $(GLOBJS) $(COMMONOBJS)
	$(LINKER) -o $(GL_BINARY) $(GLOBJS) $(COMMONOBJS) $(LDFLAGS) $(GLFLAGS) $(SDLLINK)

glhw_static: GAMEFLAGS+= -DGLQUAKE
glhw_static: $(GLOBJS) $(COMMONOBJS)
	$(LINKER) -o $(GL_BINARY_STATIC) $(GLOBJS) $(COMMONOBJS) $(LDSTATIC)

hw_dynamic: $(SOFTOBJS) $(COMMONOBJS)
	$(LINKER) -o $(BINARY) $(SOFTOBJS) $(COMMONOBJS) $(LDFLAGS) $(SDLLINK)

hw_static: $(SOFTOBJS) $(COMMONOBJS)
	$(LINKER) -o $(BINARY_STATIC) $(SOFTOBJS) $(COMMONOBJS) $(LDSTATIC)

clean:
	rm -f *.o core
cleaner:
	rm -f *.o core $(BINARY) $(BINARY_STATIC) $(GL_BINARY) $(GL_BINARY_STATIC)

